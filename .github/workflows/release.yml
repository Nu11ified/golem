name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to create releases and upload assets
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
    
    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build binaries
      run: |
        mkdir -p releases
        
        # Build for multiple platforms
        PLATFORMS="linux/amd64 linux/arm64 darwin/amd64 darwin/arm64 windows/amd64"
        
        for platform in $PLATFORMS; do
          IFS='/' read -r -a platform_split <<< "$platform"
          GOOS="${platform_split[0]}"
          GOARCH="${platform_split[1]}"
          
          output_name="golem-${{ steps.get_version.outputs.VERSION }}-$GOOS-$GOARCH"
          if [ "$GOOS" = "windows" ]; then
            output_name="$output_name.exe"
          fi
          
          echo "Building for $GOOS/$GOARCH..."
          env GOOS="$GOOS" GOARCH="$GOARCH" go build -o "releases/$output_name" -ldflags="-s -w -X main.version=${{ steps.get_version.outputs.VERSION }}" ./cmd/golem/main.go
          
          # Create compressed archive and remove the raw binary
          if [ "$GOOS" = "windows" ]; then
            (cd releases && zip "golem-${{ steps.get_version.outputs.VERSION }}-$GOOS-$GOARCH.zip" "$output_name" && rm "$output_name")
          else
            (cd releases && tar -czf "golem-${{ steps.get_version.outputs.VERSION }}-$GOOS-$GOARCH.tar.gz" "$output_name" && rm "$output_name")
          fi
        done
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          releases/*.tar.gz
          releases/*.zip
        generate_release_notes: true
        name: Golem ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## ðŸ—¿ Golem Framework ${{ steps.get_version.outputs.VERSION }}
          
          Download the appropriate binary for your platform:
          
          ### ðŸ“¦ Quick Install
          ```bash
          curl -sSL https://raw.githubusercontent.com/Nu11ified/golem/main/install.sh | bash
          ```
          
          ### ðŸ“± Manual Download
          - **Linux (x64)**: `golem-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz`
          - **Linux (ARM64)**: `golem-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz`
          - **macOS (Intel)**: `golem-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz`
          - **macOS (Apple Silicon)**: `golem-${{ steps.get_version.outputs.VERSION }}-darwin-arm64.tar.gz`
          - **Windows (x64)**: `golem-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip`
          
          ### ðŸš€ Getting Started
          ```bash
          # Extract the binary (example for Linux/macOS)
          tar -xzf golem-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
          
          # Move to your PATH
          sudo mv golem-${{ steps.get_version.outputs.VERSION }}-linux-amd64 /usr/local/bin/golem
          
          # Create your first app
          golem new my-app
          cd my-app
          golem dev
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 